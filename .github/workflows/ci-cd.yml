name: CI/CD Pipeline

on:
  push:
    branches: [feature/github-actions]
    paths: 
      - 'khimoo-portfolio/**'
      - 'articles/**'
      - 'flake.nix'
      - 'flake.lock'

env:
  CARGO_TERM_COLOR: always
  NIX_CONFIG: "experimental-features = nix-command flakes"
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  # Nix environment variables
  NIXPKGS_ALLOW_UNFREE: 1
  FLAKE_LOCK_FALLBACK: 1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Nix environment
        uses: cachix/install-nix-action@v26
        with:
          install_url: https://releases.nixos.org/nix/nix-2.21.2/install
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org/ https://devenv.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= devenv.cachix.org-1:w1cLUi8dv3hnoSPGAuibQv+f9TZLr6cv/Hm9XgU50cw=
            warn-dirty = false
            
      - name: Setup Nix cache
        uses: cachix/cachix-action@v14
        with:
          name: devenv
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: true
          
      - name: Handle flake compatibility and verify installation
        run: |
          echo "üîç Verifying Nix installation..."
          nix --version
          
          echo "üîß Checking flake compatibility..."
          if ! nix flake check --no-build 2>/dev/null; then
            echo "‚ö†Ô∏è  Flake check failed, attempting to fix compatibility issues..."
            
            # Try to update flake inputs to get compatible versions
            echo "üîÑ Updating flake inputs..."
            if nix flake update; then
              echo "‚úÖ Flake inputs updated successfully"
            else
              echo "‚ùå Failed to update flake inputs"
              
              # As a last resort, try to regenerate the lock file
              echo "üîÑ Attempting to regenerate flake.lock..."
              rm -f flake.lock || true
              nix flake lock || {
                echo "‚ùå Failed to regenerate flake.lock"
                echo "üîç Flake content:"
                cat flake.nix
                exit 1
              }
            fi
          fi
          
          echo "üìã Final flake check..."
          nix flake check --no-build
          
          echo "üîß Showing available development shells..."
          nix flake show --json | jq -r '.devShells."x86_64-linux" | keys[]' || echo "No dev shells found"
          
      - name: Activate Nix development environment
        run: |
          echo "ü¶Ä Verifying Nix development environment..."
          
          # First, try to build the development shell to catch any issues early
          echo "üî® Building development shell..."
          if ! nix develop --command echo "Development shell build successful"; then
            echo "‚ùå Failed to build development shell"
            echo "üîç Debugging flake issues..."
            nix flake show || echo "Failed to show flake"
            exit 1
          fi
          
          # Now test the full environment
          nix develop --command bash -c '
            set -e
            echo "‚úÖ Nix development shell activated successfully"
            echo ""
            
            echo "üì¶ Verifying available tools:"
            if command -v rustc >/dev/null 2>&1; then
              echo "  Rust: $(rustc --version)"
            else
              echo "  ‚ùå Rust not found"
              exit 1
            fi
            
            if command -v cargo >/dev/null 2>&1; then
              echo "  Cargo: $(cargo --version)"
            else
              echo "  ‚ùå Cargo not found"
              exit 1
            fi
            
            if command -v trunk >/dev/null 2>&1; then
              echo "  Trunk: $(trunk --version)"
            else
              echo "  ‚ùå Trunk not found"
              exit 1
            fi
            
            if command -v wasm-pack >/dev/null 2>&1; then
              echo "  wasm-pack: $(wasm-pack --version)"
            else
              echo "  ‚ùå wasm-pack not found"
              exit 1
            fi
            
            if command -v just >/dev/null 2>&1; then
              echo "  Just: $(just --version)"
            else
              echo "  ‚ùå Just not found"
              exit 1
            fi
            
            echo ""
            echo "üéØ Verifying WebAssembly target:"
            if rustup target list --installed | grep -q wasm32-unknown-unknown; then
              echo "  ‚úÖ wasm32-unknown-unknown target is installed"
            else
              echo "  ‚ùå wasm32-unknown-unknown target not found"
              exit 1
            fi
            
            echo ""
            echo "üîß Environment variables:"
            echo "  CARGO_TERM_COLOR: ${CARGO_TERM_COLOR:-not set}"
            echo "  RUST_BACKTRACE: ${RUST_BACKTRACE:-not set}"
            echo "  CARGO_INCREMENTAL: ${CARGO_INCREMENTAL:-not set}"
            echo ""
            echo "üéâ Nix environment setup completed successfully!"
          '
          
      - name: Process articles
        run: |
          echo "Article processing step - to be implemented"
          # nix develop --command cargo run --bin process-articles
          
      - name: Generate link graph
        run: |
          echo "Link graph generation step - to be implemented"
          # nix develop --command cargo run --bin generate-link-graph
          
      - name: Build WebAssembly application
        run: |
          echo "WebAssembly build step - to be implemented"
          # nix develop --command trunk build --release
          
      - name: Deploy to GitHub Pages
        run: |
          echo "GitHub Pages deployment step - to be implemented"
          # Deploy dist/ directory to GitHub Pages